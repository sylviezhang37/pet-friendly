AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: PetFriendly Backend API

Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        DB_USER: !Ref DBUser
        DB_HOST: !Ref DBHost
        DB_NAME: !Ref DBName
        DB_PASSWORD: !Ref DBPassword
        DB_PORT: !Ref DBPort
        GOOGLE_MAPS_API_KEY: !Ref GoogleMapsApiKey
        GOOGLE_CLIENT_ID: !Ref GoogleClientId

Parameters:
  DBUser:
    Type: String
    Description: Database username
  DBHost:
    Type: String
    Description: Database host
  DBName:
    Type: String
    Description: Database name
  DBPassword:
    Type: String
    Description: Database password
    NoEcho: true
  DBPort:
    Type: String
    Default: "5432"
    Description: Database port
  GoogleMapsApiKey:
    Type: String
    Description: Google Maps API Key
    NoEcho: true
  GoogleClientId:
    Type: String
    Description: Google OAuth Client ID
    NoEcho: true

Resources:
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: vpc-078923b09b6ce579f
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic

  # Allow Lambda to access RDS
  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: sg-0a0f9b73e75116c6e
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: Allow Lambda access to RDS

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  PlacesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/places-lambda.handler
      Events:
        PlacesApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/v0/places/{proxy+}
            Method: ANY

  ReviewsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/reviews-lambda.handler
      MemorySize: 128
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-0035003799b774217
          - subnet-078c8954810e6a0ba
      Events:
        ReviewsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/v0/reviews/{proxy+}
            Method: ANY

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: dist/users-lambda.handler
      MemorySize: 128
      Events:
        AuthApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/v0/auth/{proxy+}
            Method: ANY
        UserApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /api/v0/user/{proxy+}
            Method: ANY

Outputs:
  ApiGatewayUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/"
